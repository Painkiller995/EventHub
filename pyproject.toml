# ==== mypy ====
[tool.mypy]
strict = false
plugins = ["flask_mypy.plugin"]
exclude = ["venv", ".venv", "alembic", "migrations"]

# ==== ruff ====
[tool.ruff]
target-version = "py310"
line-length = 130
exclude = ["alembic" , "migrations"] 

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

# ==== black ====
[tool.black]
line-length = 130
target-version = ['py312']

# ==== isort ====
[tool.isort]
profile = "black"
line-length = 130
known_first_party = [
    "tests",
    "scripts",
    "hooks",
]

[tool.pylint.main]
disable = "missing-module-docstring, missing-class-docstring"